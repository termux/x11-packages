image: ubuntu:18.10

stages:
  - build
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: "recursive"
  ANDROID_SDK_TOOLS_REVISION: "4333796"
  ANDROID_SDK_BUILD_TOOLS_VERSION: "28.0.3"
  ANDROID_NDK_VERSION: "18"

## Prepare build environment.
before_script:
  - apt update > /dev/null
  - apt upgrade -yq > /dev/null
  - env DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends build-essential
    asciidoc asciidoctor autoconf automake bison curl devscripts ed flex g++-multilib gawk
    gettext git gnome-common gnupg gtk-3-examples gtk-doc-tools gperf help2man intltool
    libexpat1-dev libgdk-pixbuf2.0-dev libgmp-dev libgtk-3-bin libglib2.0-dev libisl-dev
    libjpeg-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libssl-dev libtool-bin
    lzip m4 openjdk-8-jdk-headless pax-utils pkg-config python-pip python3.7 python3-docutils
    python3-pip python3-setuptools python3-sphinx ruby scons texinfo unzip valac xfonts-utils
    xmlto zip zlib1g-dev > /dev/null
  - mkdir -p ${HOME}/lib
  - curl --silent --location --output sdk.zip
    https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS_REVISION}.zip
  - unzip -q -d android-sdk sdk.zip && rm -f sdk.zip
  - mv android-sdk ${HOME}/lib/
  - export ANDROID_HOME=${HOME}/lib/android-sdk
  - mkdir -p ${HOME}/.android
  - echo 'count=0' > ${HOME}/.android/repositories.cfg
  - echo y | $ANDROID_HOME/tools/bin/sdkmanager "platform-tools" > /dev/null
  - echo y | $ANDROID_HOME/tools/bin/sdkmanager "build-tools;${ANDROID_SDK_BUILD_TOOLS_VERSION}" > /dev/null
  - echo y | $ANDROID_HOME/tools/bin/sdkmanager "platforms;android-21" > /dev/null
  - echo y | $ANDROID_HOME/tools/bin/sdkmanager "platforms;android-27" > /dev/null
  - curl --silent --location --output ndk.zip
    https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_VERSION}-Linux-x86_64.zip
  - unzip -q ndk.zip && rm -f ndk.zip
  - mv android-ndk-r${ANDROID_NDK_VERSION} ${HOME}/lib/android-ndk
  - mkdir -p /data
  - mkdir -p ./build-data/data/com.termux/files/usr
  - mount --bind ./build-data /data
  - cp -a ./packages/* termux-packages/packages/

## Common configuration for all build jobs.
.job_template: &build_job
  stage: build
  script:
    - bash ./scripts/ci/gitlab.sh $TERMUX_ARCH
  retry:
    max: 2
    when:
      - script_failure
      - runner_system_failure
      - unknown_failure
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - deb-packages

## Building packages for AArch64.
build-aarch64:
  <<: *build_job
  variables:
    TERMUX_ARCH: aarch64
  cache:
    key: aarch64-data
    paths:
      - build-data

## Building packages for ARM.
build-arm:
  <<: *build_job
  variables:
    TERMUX_ARCH: arm
  cache:
    key: arm-data
    paths:
      - build-data

## Building packages for i686.
build-i686:
  <<: *build_job
  variables:
    TERMUX_ARCH: i686
  cache:
    key: i686-data
    paths:
      - build-data

## Building packages for x86_64.
build-x86_64:
  <<: *build_job
  variables:
    TERMUX_ARCH: x86_64
  cache:
    key: x86_64-data
    paths:
      - build-data

## Submit build packages to repository.
## This should be executed Only if performing
## builds on branch "master".
upload-packages:
  stage: deploy
  only:
    - master@xeffyr/x11-packages
  script:
    - bash ./scripts/ci/gitlab.sh --upload
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
